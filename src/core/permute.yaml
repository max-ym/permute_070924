permute:
  version: 0.1
  type: transform

extern type Integer:
  explain: |
    A signed integer type. The size of the integer is 32 bits.

extern type String:
  explain: |
    A UTF-8 encoded string.

extern type Boolean:
  explain: |
    A boolean value. It can be either `true` or `false`.

extern type Date:
  explain: |
    A date type.

extern type FixedPoint<const Precision = Integer>:
  explain: |
    A fixed-point number with the given precision.

trait Eq<T>:
  fn eq(self, other = T) -> Boolean:
    explain: Compare two values for equality.

  fn ne(self, other = T) -> Boolean:
    explain: Compare two values for inequality.
    define: |
      !self.eq(other)

trait ConstEq<T>:
  explain: |
    The `ConstEq` trait is used to compare two values for equality on compile time.
    It is a specialization of the `Eq` trait, thus any ConstEq trait also provides 
    the Eq trait implementation.
  specialization:
    impl Eq<T>:
      fn eq(self, other = T) -> Boolean: |
        (self as Eq).eq(other)

      fn ne(self, other = T) -> Boolean: |
        (self as Eq).ne(other)
  
  const fn eq(self, other = T) -> Boolean:
    explain: Compare two values for equality on compile time.
  
  const fn ne(self, other = T) -> Boolean:
    explain: Compare two values for inequality on compile time.
    define: |
      !self.eq(other)

impl ConstEq<Integer> for Integer:
  extern const fn eq(self, other = Integer) -> Boolean:

impl ConstEq<String> for String:
  extern const fn eq(self, other = String) -> Boolean:

impl ConstEq<Boolean> for Boolean:
  extern const fn eq(self, other = Boolean) -> Boolean:

impl ConstEq<Date> for Date:
  extern const fn eq(self, other = Date) -> Boolean:

impl ConstEq<FixedPoint> for FixedPoint:
  extern const fn eq(self, other = FixedPoint) -> Boolean:

trait Add<T>:
  type Output:
    explain: The type of the result of the addition.

  fn add(self, other = T) -> Self::Output:
    explain: Add two values.
  
trait ConstAdd<T>:
  specialization:
    impl Add<T>:
      type Output: super::Output
      fn add(self, other = T) -> Self::Output: |
        (self as ConstAdd<T>).add(other)

  type Output:
    explain: The type of the result of the addition.

  const fn add(self, other = T) -> Self::Output:
    explain: Add two values on compile time.

trait Sub<T>:
  type Output:
    explain: The type of the result of the subtraction.

  fn sub(self, other = T) -> Self::Output:
    explain: Subtract two values.

trait ConstSub<T>:
  specialization:
    impl Sub<T>:
      type Output: super::Output
      fn sub(self, other = T) -> Self::Output: |
        (self as ConstSub<T>).sub(other)

  type Output:
    explain: The type of the result of the subtraction.

  const fn sub(self, other = T) -> Self::Output:
    explain: Subtract two values on compile time.

trait Mul<T>:
  type Output:
    explain: The type of the result of the multiplication.

  fn mul(self, other = T) -> Self::Output:
    explain: Multiply two values.

trait ConstMul<T>:
  specialization:
    impl Mul<T>:
      type Output: super::Output
      fn mul(self, other = T) -> Self::Output: |
        (self as ConstMul<T>).mul(other)

  type Output:
    explain: The type of the result of the multiplication.

  const fn mul(self, other = T) -> Self::Output:
    explain: Multiply two values on compile time.

trait Div<T>:
  type Output:
    explain: The type of the result of the division.

  fn div(self, other = T) -> Self::Output:
    explain: Divide two values.

trait ConstDiv<T>:
  specialization:
    impl Div<T>:
      type Output: super::Output
      fn div(self, other = T) -> Self::Output: |
        (self as ConstDiv<T>).div(other)

  type Output:
    explain: The type of the result of the division.

  const fn div(self, other = T) -> Self::Output:
    explain: Divide two values on compile time.

trait Rem<T>:
  type Output:
    explain: The type of the result of the remainder operation.

  fn rem(self, other = T) -> Self::Output:
    explain: Get the remainder of the division of two values.

trait ConstRem<T>:
  specialization:
    impl Rem<T>:
      type Output: super::Output
      fn rem(self, other = T) -> Self::Output: |
        (self as ConstRem<T>).rem(other)

  type Output:
    explain: The type of the result of the remainder operation.

  const fn rem(self, other = T) -> Self::Output:
    explain: Get the remainder of the division of two values on compile time.

trait Neg:
  type Output:
    explain: The type of the result of the negation.

  fn neg(self) -> Self::Output:
    explain: Get the negation of the value.

trait ConstNeg:
  specialization:
    impl Neg:
      type Output: super::Output
      fn neg(self) -> Self::Output: |
        (self as ConstNeg).neg()

  type Output:
    explain: The type of the result of the negation.

  const fn neg(self) -> Self::Output:
    explain: Get the negation of the value on compile time.

trait Not:
  type Output:
    explain: The type of the result of the logical negation.

  fn not(self) -> Self::Output:
    explain: Get the logical negation of the value.

trait ConstNot:
  specialization:
    impl Not:
      type Output: super::Output
      fn not(self) -> Self::Output: |
        (self as ConstNot).not()

  type Output:
    explain: The type of the result of the logical negation.

  const fn not(self) -> Self::Output:
    explain: Get the logical negation of the value on compile time.

trait And<T>:
  type Output:
    explain: The type of the result of the logical AND operation.

  fn and(self, other = T) -> Self::Output:
    explain: Perform a logical AND operation.

trait ConstAnd<T>:
  specialization:
    impl And<T>:
      type Output: super::Output
      fn and(self, other = T) -> Self::Output: |
        (self as ConstAnd<T>).and(other)

  type Output:
    explain: The type of the result of the logical AND operation.

  const fn and(self, other = T) -> Self::Output:
    explain: Perform a logical AND operation on compile time.

trait Or<T>:
  type Output:
    explain: The type of the result of the logical OR operation.

  fn or(self, other = T) -> Self::Output:
    explain: Perform a logical OR operation.

trait ConstOr<T>:
  specialization:
    impl Or<T>:
      type Output: super::Output
      fn or(self, other = T) -> Self::Output: |
        (self as ConstOr<T>).or(other)

  type Output:
    explain: The type of the result of the logical OR operation.

  const fn or(self, other = T) -> Self::Output:
    explain: Perform a logical OR operation on compile time.

trait Shl<T>:
  type Output:
    explain: The type of the result of the left shift operation.

  fn shl(self, other = T) -> Self::Output:
    explain: Perform a left shift operation.

trait ConstShl<T>:
  specialization:
    impl Shl<T>:
      type Output: super::Output
      fn shl(self, other = T) -> Self::Output: |
        (self as ConstShl<T>).shl(other)

  type Output:
    explain: The type of the result of the left shift operation.

  const fn shl(self, other = T) -> Self::Output:
    explain: Perform a left shift operation on compile time.

trait Shr<T>:
  type Output:
    explain: The type of the result of the right shift operation.

  fn shr(self, other = T) -> Self::Output:
    explain: Perform a right shift operation.

trait ConstShr<T>:
  specialization:
    impl Shr<T>:
      type Output: super::Output
      fn shr(self, other = T) -> Self::Output: |
        (self as ConstShr<T>).shr(other)

  type Output:
    explain: The type of the result of the right shift operation.

  const fn shr(self, other = T) -> Self::Output:
    explain: Perform a right shift operation on compile time.

enum Ordering:
  explain: |
    The result of a comparison between two values.
  define:
    - Less
    - Equal
    - Greater

trait Ord<T>:
  fn cmp(self, other = T) -> Ordering:
    explain: Compare two values.

trait ConstOrd<T>:
  specialization:
    impl Ord<T>:
      fn cmp(self, other = T) -> Ordering: |
        (self as ConstOrd<T>).cmp(other)

  fn cmp(self, other = T) -> Ordering:
    explain: Compare two values on compile time.

impl ConstOrd<Integer> for Integer:
  extern const fn cmp(self, other = Integer) -> Ordering:

impl ConstAdd<Integer> for Integer:
  type Output: Integer
  extern const fn add(self, other = Integer) -> Integer:

impl ConstSub<Integer> for Integer:
  type Output: Integer
  extern const fn sub(self, other = Integer) -> Integer:

impl ConstMul<Integer> for Integer:
  type Output: Integer
  extern const fn mul(self, other = Integer) -> Integer:

impl ConstDiv<Integer> for Integer:
  type Output: Integer
  extern const fn div(self, other = Integer) -> Integer:

impl ConstRem<Integer> for Integer:
  type Output: Integer
  extern const fn rem(self, other = Integer) -> Integer:

impl ConstNeg for Integer:
  type Output: Integer
  extern const fn neg(self) -> Integer:

impl ConstNot for Boolean:
  type Output: Boolean
  extern const fn not(self) -> Boolean:

impl ConstAnd<Boolean> for Boolean:
  type Output: Boolean
  extern const fn and(self, other = Boolean) -> Boolean:

impl ConstOr<Boolean> for Boolean:
  type Output: Boolean
  extern const fn or(self, other = Boolean) -> Boolean:

impl<N> ConstAdd<FixedPoint<Precision = N>> for FixedPoint<Precision = N>:
  type Output: FixedPoint<Precision = N>
  extern const fn add(self, other = FixedPoint<Precision = N>) -> FixedPoint<Precision = N>:

impl<N> ConstSub<FixedPoint<Precision = N>> for FixedPoint<Precision = N>:
  type Output: FixedPoint<Precision = N>
  extern const fn sub(self, other = FixedPoint<Precision = N>) -> FixedPoint<Precision = N>:

impl<N> ConstMul<FixedPoint<Precision = N>> for FixedPoint<Precision = N>:
  type Output: FixedPoint<Precision = N>
  extern const fn mul(self, other = FixedPoint<Precision = N>) -> FixedPoint<Precision = N>:

impl<N> ConstDiv<FixedPoint<Precision = N>> for FixedPoint<Precision = N>:
  type Output: FixedPoint<Precision = N>
  extern const fn div(self, other = FixedPoint<Precision = N>) -> FixedPoint<Precision = N>:

impl<N> ConstNeg for FixedPoint<Precision = N>:
  type Output: FixedPoint<Precision = N>
  extern const fn neg(self) -> FixedPoint<Precision = N>:

impl<N> ConstOrd<FixedPoint<Precision = N>> for FixedPoint<Precision = N>:
  extern const fn cmp(self, other = FixedPoint<Precision = N>) -> Ordering:

impl ConstOrd<Date> for Date:
  extern const fn cmp(self, other = Date) -> Ordering:

enum ControlFlow<R, O>:
  explain: |
    A control flow type that can be used to control the flow of execution.
  define:
    - Continue(O)
    - Break(R)

trait Try:
  explain: |
    The `Try` trait is used to handle operations that may fail.
    It's branch method is called on invocation by the operator `?` at the end of expression.
    Example: `operation()?`.

  type Output:
    explain: |
      The type of the value that the operation may return when flow continues.
  type Residual:
    explain: |
      The type of the value that the operation may return in case of a break.

  const fn branch(self) -> ControlFlow<Self::Residual, Self::Output>:
    explain: |
      Branch the control flow. Continue if the operation is successful, break otherwise.

trait Into<T>:
  fn into(self) -> T:
    explain: Convert the value into the target type.

trait From<T>:
  fn from(value = T) -> Self:
    explain: Convert the value from the source type.

trait ConstInto<T>:
  specialization:
    impl Into<T>:
      fn into(self) -> T: |
        (self as ConstInto<T>).into()

  const fn into(self) -> T:
    explain: Convert the value into the target type on compile time.

trait ConstFrom<T>:
  specialization:
    impl From<T>:
      fn from(value = T) -> Self: |
        (self as ConstFrom<T>).from(value)

  const fn from(value = T) -> Self:
    explain: Convert the value from the source type on compile time.

impl<T, U> Into<U> for T:
  where:
    U: From<T> + ~ConstFrom<T>
  explain: Blanket implementation for conversion between types.
  
  fn into(self) -> U: |
    U::from(self)

impl<T, U> ConstInto<T> for U:
  where:
    U: ConstFrom<T>
  explain: Blanket implementation for conversion between types on compile time.

  const fn const_into(self) -> T: |
    U::const_from(self)

trait TryInto<T>:
  fn try_into(self) -> Option<T>:
    explain: Convert the value into the target type. None if the conversion fails.

trait TryFrom<T>:
  fn try_from(value = T) -> Option<Self>:
    explain: Convert the value from the source type. None if the conversion fails.

trait ConstTryInto<T>:
  specialization:
    impl TryInto<T>:
      fn try_into(self) -> Option<T>: |
        (self as ConstTryInto<T>).try_into()

  const fn try_into(self) -> Option<T>:
    explain: Convert the value into the target type on compile time. None if the conversion fails.

trait ConstTryFrom<T>:
  specialization:
    impl TryFrom<T>:
      fn try_from(value = T) -> Option<Self>: |
        (self as ConstTryFrom<T>).try_from(value)

  const fn try_from(value = T) -> Option<Self>:
    explain: Convert the value from the source type on compile time. None if the conversion fails.

impl<T, U> TryInto<U> for T:
  where:
    U: TryFrom<T> + ~ConstTryFrom<T>
  explain: Blanket implementation for conversion between types.
  
  fn try_into(self) -> Option<U>: |
    U::try_from(self)

impl<T, U> ConstTryInto<T> for U:
  where:
    U: ConstTryFrom<T>

  const fn try_into(self) -> Option<T>: |
    U::try_from(self)

trait ConstImplicitInto<T>:
  const fn const_implicit_into(self) -> T:
    explain: |
      Convert the value into the target type on compile time, implicitly.
      This is a function that is called implicitly by the compiler.
      Const in the name means that the context of evaluation is constant,
      hence the function is called at compile time.

impl ConstImplicitInto<Date> for String:
  extern const fn const_implicit_into(self) -> Date:
    explain: Parse the string as a date.

enum Option<T>:
  - Some(T)
  - None

impl<T> Option<T>:
  const fn is_some(self) -> Boolean: |
    match self {
      Some(_) => true,
      None => false,
    }

  const fn is_none(self) -> Boolean: |
    !self.is_some()

  const fn expect(self, message = String) -> T:
    explain: |
      Unwrap the option, panic with the given message if the option is `None`.
    define: |
      match self {
        Some(value) => value,
        None => panic(message),
      }

impl<T> Try<Output = T, Residual = ()> for Option<T>:
  const fn branch(self) -> ControlFlow<String, T>: |
    use ControlFlow::*;
    match self {
      Some(value) => Continue(value),
      None => Break(()),
    }

# This trait has special meaning for the compiler.
trait Transparent:
  explain: |
    The `Transparent` trait is used to indicate that the type is transparent.
    This means that the type is as a wrapper around another type and in the code
    in immutable context acts as if it was the wrapped type.

  type Inner:
    explain: |
      The type that is wrapped by the transparent type.

  const fn inner(self) -> Self::Inner:
    explain: |
      Get the inner value of the transparent type.

trait TransparentMutable:
  where:
    Self: Transparent
  explain: |
    The `TransparentMutable` trait is used to indicate that the type is transparent and mutable.
    This means that the type is as a wrapper around another type and in the code
    in mutable context acts as if it was the wrapped type.

  const fn inner_mut(mut self) -> mut Self::Inner:
    explain: |
      Get the mutable inner value of the transparent type.

enum Never:
  explain: |
    The `Never` type is used to indicate that a function never returns.
    This enumerator is impossible to construct since it has no variants.
    Compiler's control flow analysis accounts for this (or the same other types)
    when checking for reachability of code.

extern const fn panic(message = String) -> Never:
  explain: |
    Panic with the given message.

impl<T> Eq<Option<T>> for Option<T>:
  where:
    T: Eq<T> + ~ConstEq<T>

  fn eq(self, other = Option<T>) -> Boolean: |
    match (self, other) {
      (Some(a), Some(b)) => a.eq(b),
      (None, None) => true,
      _ => false,
    }

impl<T> ConstEq<Option<T>> for Option<T>:
  where:
    T: ConstEq<T>
  const fn eq(self, other = Option<T>) -> Boolean: |
    match (self, other) {
      (Some(a), Some(b)) => a.eq(b),
      (None, None) => true,
      _ => false,
    }

type TypeId:
  inner: Integer
  explain: |
    Identifier of the type in complete domain. It is not guaranteed to be the same across 
    different runs.

impl Transparent for TypeId:
  type Inner: Integer
  const fn inner(self) -> Integer: |
    self.inner

# This trait is special as it is implicitly implemented for all types.
trait Any:
  const fn type_id(self) -> TypeId:
    explain: Get the type identifier of the value.

  const fn is<T>(self) -> Boolean:
    explain: Check if the value is of the given type.
    define: self.type_id() == T::type_id()

  fn downcast<T>(self) -> Option<T>:
    explain: Attempt to downcast the value to the given type.

trait Iterator:
  type Item:
    explain: |
      The type of the items produced by the iterator.
  explain: |
    An iterator over a collection of values of type `T`.

  fn next(mut self) -> Option<Self::Item>:
    explain: Get the next value from the iterator. None if the iterator is exhausted.

trait EndlessIterator:
  explain: |
    An iterator that never ends.

  # This trait is a specialization of the `Iterator` trait.
  # Specializations are used to provide additional information about the trait.
  # It also defines the specialized methods.
  specialization:
    impl Iterator:
      type Item: super::Item

      fn next(mut self) -> Option<Self::Item>: |
        Some((self as EndlessIterator).next())

  type Item:
    explain: |
      The type of the items produced by the iterator.

  fn next(mut self) -> Self::Item:
    explain: Get the next value from the iterator.

trait DoubleEndedIterator:
  where:
    Self: Iterator
  explain: |
    An iterator that can be iterated from both ends.

  fn next_back(mut self) -> Option<Self::Item>:
    explain: Get the next value from the back of the iterator. None if the iterator is exhausted.

impl String:
  extern const fn len(self) -> Integer:
    explain: Get the length of the string.

  const fn is_empty(self) -> Boolean:
    explain: Check if the string is empty.
    define: self.len() == 0

  extern fn split_off(mut self, at = Integer) -> String:
    explain: Split the string at the given index and return the tail.
    check: 0 <= at && at <= self.len()

  extern fn insert(mut self, index = Integer, other = String):
    explain: Insert the other string at the given index.
    check: 0 <= index && index <= self.len()

  extern const fn starts_with(self, prefix = String) -> Boolean:
    explain: Check if the string starts with the given prefix.

  extern const fn ends_with(self, suffix = String) -> Boolean:
    explain: Check if the string ends with the given suffix.

  extern fn to_uppercase(self) -> String:
    explain: Convert the string to uppercase.

  extern fn to_lowercase(self) -> String:
    explain: Convert the string to lowercase.

  extern fn trim(self) -> String:
    explain: Remove leading and trailing whitespaces.

  extern fn trim_start(self) -> String:
    explain: Remove leading whitespaces.

  extern fn trim_end(self) -> String:
    explain: Remove trailing whitespaces.

  extern fn replace(mut self, from = String, to = String):
    explain: Replace all occurrences of the `from` string with the `to` string.

  extern fn strip_prefix(self, prefix = String) -> Option<String>:
    explain: Remove the prefix if it exists.

  extern fn strip_suffix(self, suffix = String) -> Option<String>:
    explain: Remove the suffix if it exists.

  extern fn repeat(self, count = Integer) -> String:
    explain: Repeat the string `count` times.
    check: count >= 0

  extern fn lines(self) -> Lines:
    explain: Split the string into lines.

  extern const fn contains(self, pattern = String) -> Boolean:
    explain: Check if the string contains the given pattern.

  extern fn find(self, pattern = String) -> Option<Integer>:
    explain: Find the first occurrence of the pattern in the string.

  extern fn rfind(self, pattern = String) -> Option<Integer>:
    explain: Find the last occurrence of the pattern in the string.

  extern const fn is_ascii(self) -> Boolean:
    explain: Check if the string is ASCII.

  extern const fn is_ascii_lowercase(self) -> Boolean:
    explain: Check if the string is ASCII lowercase.

  extern const fn is_ascii_uppercase(self) -> Boolean:
    explain: Check if the string is ASCII uppercase.

  extern const fn is_ascii_alphabetic(self) -> Boolean:
    explain: Check if the string is ASCII alphabetic.

  extern const fn is_ascii_alphanumeric(self) -> Boolean:
    explain: Check if the string is ASCII alphanumeric.

  extern fn split(self, pattern = String) -> Split:
    explain: Split the string by the given pattern.

  extern const fn is_regex_match(self, pattern = Regex) -> Boolean:
    explain: Check if the whole string matches the given regular expression pattern.

extern type Lines:
  explain: Iterator over the lines of a string.

impl Iterator for Lines:
  type Item: String
  extern fn next(mut self) -> Option<String>:
    explain: Get the next line from the iterator. None if the iterator is exhausted.

extern type Split:
  explain: Iterator over the parts of a string.

impl Iterator for Split:
  type Item: String
  extern fn next(mut self) -> Option<String>:
    explain: Get the next part from the iterator. None if the iterator is exhausted.

type Regex:
  inner: String
  explain: |
    A regular expression pattern.

impl TryFrom<String> for Regex:
  extern fn try_from(String) -> Option<Regex>:
    explain: Parse the string as a regular expression pattern. None if the pattern is invalid.

impl ConstImplicitInto<Regex> for String:
  const fn const_implicit_into(self) -> Regex: |
    self.try_into().expect("Invalid regular expression pattern")

type DateFmt:
  inner: String
  explain: |
    A date format pattern.

impl TryFrom<String> for DateFmt:
  extern fn try_from(String) -> Option<DateFmt>:
    explain: Parse the string as a date format pattern. None if the pattern is invalid.

impl ConstImplicitInto<DateFmt> for String:
  const fn const_implicit_into(self) -> DateFmt: |
    self.try_into().expect("Invalid date format pattern")

impl Date:
  extern fn format(self, pattern = DateFmt) -> String:
    explain: Format the date using the given pattern.
