permute:
  version: 0.1
  type: feeder # This file describes a feeder, that provides transformed data to a sink.
  use:
    # Import the `EmploymentRecordExt` extension and resolve the name conflict with the
    # same named extension in this file defined below by renaming.
    - transform::EmploymentRecordExt as EmploymentRecordExt2

# Sink type that this feeder provides data to.
feeder: Csv

# Configure the CSV sink.
Csv:
  row_sequence:
    start: 1
  date_fmt: transform::DateExt::date_fmt # This is a reference to the transform's "date_fmt".
  none_fmt: # Function to format None values.
    (_): |
      # Closure. Exact return type inferred from sink's parameter definition.
      "" # Return an empty string for None values.

  # Write the following fields to the CSV file:
  write: # List of closures to write fields of the records to the CSV file.
    - (_, csv): csv.row_sequence.next()
    - (e, _): e.employee_id
    - (e, _): e.hire_date
    - (e, _): e.termination_date
      # Example of using a sink defined fn `salary` of the same name as field in `EmploymentRecord`.
      # Without explicit path, won't compile due to ambiguity error.
    - (e, _): e.salary() # also possible to call like `(e as EmploymentRecordExt).salary()`
    - (e, _): e.job_title()
  header: # Optional header row for the CSV file from this hypothetical generator.
    - "Row Number"
    - "Employee ID"
    - "Hire Date"
    - "Termination Date"
    - "Salary"
    - "Job Title"

# Define the `salary` function for the `EmploymentRecord` entity.
#
# The `EmploymentRecordExt` creates named extension for the `EmploymentRecord` entity.
# Extension allows to add new methods to the entity and if there is any collision with
# existing methods, the extension method can be either called like
# `EmploymentRecordExt::salary(er)` or like `(er as EmploymentRecordExt).salary()`, where `er`
# is an instance of the `EmploymentRecord`.
impl EmploymentRecord as EmploymentRecordExt:
  fn salary(self) -> String: |
    # Call the `format` method on the `salary` field of the `EmploymentRecord` entity.
    self.salary.format("${:.2}")
