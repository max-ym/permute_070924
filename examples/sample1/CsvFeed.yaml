permute:
  version: 0.1
  type: feeder # This file describes a feeder, that provides transformed data to a sink.
  use:
    - transform::EmploymentRecordExt

# Sink type that this feeder provides data to.
feeder: Csv

# Configure the CSV sink.
Csv:
  row_sequence:
    start: 1
  date_fmt: transform::DateExt::date_fmt # This is a reference to the transform's "date_fmt".
  none_fmt: # Function to format None values.
    (_): |
      # Closure. Exact return type inferred from sink's parameter definition.
      "" # Return an empty string for None values.

  # Write the following fields to the CSV file:
  write: # List of closures to write fields of the records to the CSV file.
    - (_, csv): csv.row_sequence.next()
    - (e, _): e.employee_id
    - (e, _): e.hire_date
    - (e, _): e.termination_date
      # Example of using a sink defined fn `salary` of the same name as field in `EmploymentRecord`.
      # Without explicit path, won't compile due to ambiguity error.
    - (e, _): EmploymentRecord::salary(e)
    - (e, _): e.job_title
  header: # Optional header row for the CSV file from this hypothetical generator.
    - "Row Number"
    - "Employee ID"
    - "Hire Date"
    - "Termination Date"
    - "Salary"
    - "Job Title"

# Define the `salary` function for the `EmploymentRecord` entity.
impl EmploymentRecord:
  fn salary(self) -> String: |
    # Call the `format` method on the `salary` field of the `EmploymentRecord` entity.
    self.salary.format("${:.2}")
