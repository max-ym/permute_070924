permute:
  version: 0.1
  type: sink
  use:
    - transform::*

# Select sink "csv". This generator is implementation specific, and not defined
# by the Permute specification itself. It can basically be any custom generator implementation
# provided to the framework with this name.
sink: csv

# Some field defined by the sink "csv".
csv:
  # This hypothetical generator would have a field "row_sequence" that would be used to
  # generate a sequence of row numbers.
  row_sequence:
    start: 1
  # This hypothetical generator would have a field "date_fmt" that would be used to
  # format a date as a string.
  date_fmt: transform::date_fmt # This is a reference to the transform's "date_fmt".

  none_fmt: # Function to format None values.
    output: String
    self: Option<_> # This is a generic type definition for the Option type.
    define: "" # display empty string for None

  # For each employment record...
  each: employment_record
  as: e # Alias the employment record instance as "e".
  # ...write the following fields to the CSV file.
  write:
    - csv.row_sequence.next()
    - e.employee_id
    - e.hire_date
    - e.termination_date
      # Example of using a sink defined fn `salary` of the same name as field in `employment_record`.
      # Without explicit path, won't compile due to ambiguity error.
    - self::salary(e)
    - e.job_title
  header: # Optional header row for the CSV file from this hypothetical generator.
    - "Row Number"
    - "Employee ID"
    - "Hire Date"
    - "Termination Date"
    - "Salary"
    - "Job Title"

employment_record.salary:
  output: String
  # Call the `format` method on the `salary` field of the `employment_record` entity.
  define: self.salary.format("${:.2}")
